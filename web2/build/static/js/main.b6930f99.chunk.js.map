{"version":3,"sources":["component/Devices/schema.ts","component/Header/index.tsx","component/Statistics/custom.js","component/Graph/index.tsx","component/Statistics/setThresholdSchema.ts","component/ThresholdSlide/index.tsx","component/Statistics/index.tsx","component/ConfigSlide/index.tsx","component/ConfigTable/index.tsx","component/ConfigTable/setEngineSchema.ts","component/ConfigComponent/useLongPress.js","component/ConfigComponent/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ENVIRONMENT_FEEDING_UNIT","gql","GET_FEEDING_DEVICES","Header","className","Navbar","bg","expand","variant","Brand","href","Image","Toggle","aria-controls","Collapse","id","Nav","to","style","fontSize","Form","inline","FormControl","type","placeholder","aria-label","Button","Marks","color","label","ThresholdColor","errorThreshold","safeThreshold","Properties","value","marks","maxValue","minValue","safeThresholeType","thresholdColor","Graph","props","data","startDate","endDate","property","showData","showLabels","showColors","updateTime","forEach","time","index","Date","toISOString","push","toLocaleString","threshold","state","labels","datasets","backgroundColor","borderColor","borderWidth","height","width","options","plugins","title","display","text","font","size","padding","legend","position","responsive","maintainAspectRatio","SET_FEEDING_THRESHOLD","ThresholdSlideItem","useMutation","updateThreshold","useState","inputValue","setInputValue","isDisableButton","setIsDisableButton","isTabletOrMobile","useMediaQuery","query","useEffect","handleOnChange","confirm","showConfirm","content","onOk","variables","_id","onCancel","handleClickReset","span","marginTop","min","max","onChange","defaultValue","included","vertical","margin","marginBottom","onClick","disabled","danger","marginRight","Statistics","useContext","DeviceContext","deviceState","deviceIdChoose","setDeviceIdChoose","propertyChoose","setPropertyChoose","setStartDate","setEndDate","length","FormGroup","Label","Control","as","e","target","map","device","name","Text","RangePicker","showTime","disabledDate","current","moment","endOf","dateString","_d","ThresholdSlide","ConfigSlideItem","formatter","apiKey","updateDevice","tipFormatter","ConfigTable","properties","ConfigSlide","SET_FOOT_CAN","SET_FOOT_TRAY","SET_FAN","UPDATE_FEEDING_CYLINDER_STATUS","preventDefault","event","isTouchEvent","touches","useLongPress","onLongPress","onRelease","shouldPreventDefault","delay","longPressTriggered","setLongPressTriggered","timeout","useRef","start","useCallback","addEventListener","passive","setTimeout","clear","shouldTriggerClick","clearTimeout","removeEventListener","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","DefaultMarks","ConfigComponent","setDeviceState","updateCylinder","console","log","status","defaultOptions","longPressUpEvent","longPressDownEvent","Group","icon","CaretUpOutlined","CaretDownOutlined","createContext","App","useQuery","pollInterval","getFeedingDevices","Provider","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","process","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6930f99.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const ENVIRONMENT_FEEDING_UNIT = gql`\r\n    fragment EnvironmentFeedingUnit on EnvironmentFeedingUnit {\r\n        data\r\n        threshold\r\n        updateTime\r\n    }\r\n`;\r\n\r\nexport const GET_FEEDING_DEVICES = gql`\r\n    ${ENVIRONMENT_FEEDING_UNIT}\r\n    query getFeedingDevices {\r\n        getFeedingDevices {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_FEEDING_DEVICE = gql`\r\n    mutation CreateFeedingDevice($input: FeedingDeviceCreateInput) {\r\n        createFeedingDevice(input: $input) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_FEEDING_DEVICE = gql`\r\n    mutation UpdateFeedingDevice($input: FeedingDeviceUpdateInput) {\r\n        updateFeedingDevice(input: $input) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n        }\r\n    }\r\n`;","import \"./header.scss\";\r\nimport React from \"react\";\r\nimport {\r\n  Button,\r\n  Form,\r\n  FormControl,\r\n  Image,\r\n  Nav,\r\n  Navbar,\r\n} from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <header className=\"border-bottom\">\r\n      <Navbar bg=\"light\" expand=\"lg\" className=\"p-0 px-2\" variant=\"light\">\r\n        <Navbar.Brand href=\"/\" className=\"p-0\">\r\n          <Image className=\"header__logo\" />\r\n        </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"ml-auto d-flex align-items-center\">\r\n            <NavLink to=\"/\" className=\"px-3\" style={{fontSize: \"1.2rem\"}}>Home</NavLink>\r\n            <NavLink to=\"/device\" className=\"px-3\" style={{fontSize: \"1.2rem\"}}>Thiết bị</NavLink>\r\n            <NavLink to=\"/statistics\" className=\"px-3\" style={{fontSize: \"1.2rem\"}}>Dữ liệu</NavLink>\r\n            <NavLink to=\"/about\" className=\"px-3 mr-3\" style={{fontSize: \"1.2rem\"}}>About</NavLink>\r\n          </Nav>\r\n          <Form inline className=\"mr-5 search-input\">\r\n            <FormControl\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              className=\"mr-2\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <Button variant=\"outline-success search-button\">Search</Button>\r\n          </Form>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const Marks = {\r\n    \"0\": \"0\",\r\n    \"100\": {\r\n        style: {\r\n            color: '#f50',\r\n        },\r\n        label: <strong>100</strong>,\r\n    },\r\n    \"50\": {\r\n        style: {\r\n            color: '#d4d106',\r\n        },\r\n        label: <strong>50</strong>,\r\n    },\r\n}\r\n\r\nconst O2Marks = {\r\n    \"0\": \"0\",\r\n    \"10000\": {\r\n        style: {\r\n            color: '#f50',\r\n        },\r\n        label: <strong>10000</strong>,\r\n    },\r\n    \"5000\": {\r\n        style: {\r\n            color: '#d4d106',\r\n        },\r\n        label: <strong>5000</strong>,\r\n    },\r\n}\r\n\r\nconst ThresholdColor = {\r\n    errorThreshold: \"#ff0040\",\r\n    safeThreshold: \"#00d9ff\",\r\n}\r\n\r\nexport const Properties = [\r\n    {\r\n        label: \"Nồng độ O2 trong nước (μg)\",\r\n        value: \"o2Gas\",\r\n        marks: O2Marks,\r\n        maxValue: 10000,\r\n        minValue: 0,\r\n        safeThresholeType: \"higher\",\r\n        thresholdColor: ThresholdColor,\r\n    },\r\n    {\r\n        label: \"Độ pH\",\r\n        value: \"pH\",\r\n        marks: Marks,\r\n        maxValue: 100,\r\n        minValue: 0,\r\n        safeThresholeType: \"lower\",\r\n        thresholdColor: ThresholdColor,\r\n    },\r\n    {\r\n        label: \"Nhiệt độ nước (°C)\",\r\n        value: \"temperature\",\r\n        marks: Marks,\r\n        maxValue: 100,\r\n        minValue: 0,\r\n        safeThresholeType: \"lower\",\r\n        thresholdColor: ThresholdColor,\r\n    },\r\n]\r\n","import \"./graph.scss\"\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { Property } from \"../ThresholdSlide\";\r\ninterface GraphProps {\r\n    data: any;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    property: Property;\r\n}\r\n\r\nconst Graph = (props: GraphProps) => {\r\n    const { data, startDate, endDate, property } = props;\r\n    let showData: any[] = [];\r\n    let showLabels: any[] = [];\r\n    let showColors: any[] = [];\r\n    \r\n    if(data && startDate && endDate) {\r\n        data[property.value].updateTime.forEach((time: any, index: number) => {\r\n            if(time <= new Date(endDate).toISOString() && time >= new Date(startDate).toISOString()) {\r\n                showLabels.push(new Date(time).toLocaleString())\r\n                showData.push(data[property.value].data[index]);\r\n                if(property.safeThresholeType==='lower')\r\n                showColors.push(data[property.value].data[index] < data[property.value].threshold ? property.thresholdColor.safeThreshold : property.thresholdColor.errorThreshold);\r\n                if(property.safeThresholeType==='higher')\r\n                showColors.push(data[property.value].data[index] > data[property.value].threshold ? property.thresholdColor.safeThreshold : property.thresholdColor.errorThreshold);\r\n            }\r\n        });\r\n    }\r\n\r\n    const state = {\r\n        labels: showLabels,\r\n        datasets: [\r\n            {\r\n                // lineTension: 0.5,\r\n                label: property.label,\r\n                backgroundColor: showColors,\r\n                borderColor: '#535252',\r\n                borderWidth: 1,\r\n                data: showData,\r\n            }\r\n        ]\r\n    }\r\n    \r\n    return (\r\n        <div className=\"graph\">\r\n            <Bar\r\n                height={300}\r\n                width={350}\r\n                data={state}\r\n                options={{\r\n                    plugins: {\r\n                        title:{\r\n                            display:true,\r\n                            text: `Biểu đồ ${property.label}`,\r\n                            font: {\r\n                                size: 30\r\n                            },\r\n                            padding: 20\r\n                        },\r\n                        legend:{\r\n                            display:true,\r\n                            position:'bottom',\r\n                        },               \r\n                    },\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    \r\n                    // scales: {\r\n                    //     y: {\r\n                    //         title: \"jfjfjf\",\r\n                    //         ticks: {\r\n                    //             // Include a dollar sign in the ticks\r\n                    //             callback: function(value: any) {\r\n                    //                 return '$' + value;\r\n                    //             }\r\n                    //         }\r\n                    //     }\r\n                    // }\r\n                }}\r\n                type=\"bar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default Graph;","import { gql } from \"@apollo/client\";\r\n\r\nexport const ENVIRONMENT_FEEDING_UNIT = gql`\r\n    fragment EnvironmentFeedingUnit on EnvironmentFeedingUnit {\r\n        data\r\n        threshold\r\n        updateTime\r\n    }\r\n`;\r\n\r\nexport const SET_FEEDING_THRESHOLD = gql`\r\n    ${ENVIRONMENT_FEEDING_UNIT}\r\n    mutation SetFeedingThreshold($value: Float!, $property: String!, $id: String!) {\r\n        setFeedingThreshold(value: $value, property: $property, id: $id) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n            cylinder\r\n        }\r\n    }\r\n`;\r\n\r\n","import \"./slider.scss\"\r\nimport { Button, Col, InputNumber, Modal, Row, Slider } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Device } from \"../Devices\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { SET_FEEDING_THRESHOLD } from \"../Statistics/setThresholdSchema\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\nexport interface Property {\r\n    label: string,\r\n    value: string,\r\n    marks?: any,\r\n    maxValue: number,\r\n    minValue: number,\r\n    safeThresholeType: string,\r\n    thresholdColor: {\r\n        errorThreshold: string,\r\n        safeThreshold: string,\r\n    }\r\n}\r\ninterface ThresholdSlideItemProps {\r\n    data: Device,\r\n    property: Property,\r\n}\r\n\r\nconst ThresholdSlideItem = (props: ThresholdSlideItemProps) => {\r\n    const { data, property } = props;\r\n    const [ updateThreshold ] = useMutation(SET_FEEDING_THRESHOLD);\r\n    const [ inputValue, setInputValue ] = useState((data as any)[property.value].threshold);\r\n    const [ isDisableButton, setIsDisableButton ] = useState(true);\r\n    \r\n    const isTabletOrMobile = useMediaQuery({query: \"(max-width: 1224px)\"})\r\n    useEffect(() => {\r\n        setInputValue((data as any)[property.value].threshold)\r\n    },[property,data])\r\n\r\n    useEffect(() => {\r\n        setIsDisableButton(inputValue === (data as any)[property.value].threshold);\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[inputValue]);\r\n\r\n    const handleOnChange = (value: number) => {\r\n        setInputValue(value)\r\n    }\r\n\r\n    const { confirm } = Modal;\r\n    const showConfirm = () => {\r\n        confirm({\r\n            title: 'Xác nhận điều chỉnh ngưỡng',\r\n            content: `${property.label} thay đổi chỉ số từ ${(data as any)[property.value].threshold} thành ${inputValue}`,\r\n            onOk() {\r\n                setIsDisableButton(true);\r\n                updateThreshold({\r\n                    variables: {\r\n                        value: inputValue,\r\n                        id: data._id,\r\n                        property: property.value,\r\n                    }\r\n                });\r\n            },\r\n            onCancel() {\r\n            },\r\n        });\r\n        \r\n    }\r\n\r\n    const handleClickReset = () => {\r\n        setIsDisableButton(false);\r\n        setInputValue((data as any)[property.value].threshold);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!isTabletOrMobile && (\r\n                <div className=\"thresholdSlideItem\">\r\n                    <h3 className=\"\">Thiết lập ngưỡng cho phép</h3>\r\n                    <h4 className=\"\">{property.label}</h4>\r\n                    <Row>\r\n                        <Col span={8}>\r\n                            <div style={{display:'inline-block', height:'45vh', marginTop:\"4vh\"}}>\r\n                            <Slider\r\n                                min={property.minValue}\r\n                                max={property.maxValue}\r\n                                onChange={handleOnChange}\r\n                                value={typeof inputValue === 'number' ? inputValue : 0}\r\n                                marks={property.marks}\r\n                                defaultValue={(data as any)[property.value].threshold}\r\n                                included\r\n                                vertical\r\n                            />\r\n                            </div>\r\n                        </Col>\r\n                        <Col span={8} style={{ margin: '0 16px' }}>\r\n                            <InputNumber\r\n                                min={0}\r\n                                max={10000}\r\n                                className=\"my-5\"\r\n                                // formatter={value => `${value}`}\r\n                                value={inputValue}\r\n                                onChange={handleOnChange}\r\n                            />\r\n                            <Button\r\n                                style={{ marginBottom: '16px' }}\r\n                                type=\"primary\"\r\n                                onClick={showConfirm}\r\n                                disabled={isDisableButton}\r\n                            >\r\n                                Confirm\r\n                            </Button>\r\n                            <Button\r\n                                style={{ marginBottom: '16px' }}\r\n                                type=\"primary\"\r\n                                danger\r\n                                onClick={handleClickReset}\r\n                            >\r\n                                Reset\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )}\r\n            {isTabletOrMobile &&(\r\n                <div className=\"thresholdSlideItem\">\r\n                <h3 className=\"\">Thiết lập ngưỡng {property.label} cho phép</h3>\r\n                    <div style={{marginTop:\"8vh\", margin: \"0 20px\"}}>\r\n                    <Slider\r\n                        min={property.minValue}\r\n                        max={property.maxValue}\r\n                        onChange={handleOnChange}\r\n                        value={typeof inputValue === 'number' ? inputValue : 0}\r\n                        marks={property.marks}\r\n                        defaultValue={(data as any)[property.value].threshold}\r\n                        included\r\n                    />\r\n                    </div>\r\n                    <InputNumber\r\n                        min={0}\r\n                        max={10000}\r\n                        className=\"my-4\"\r\n                        style={{marginRight: \"50px\"}}\r\n                        // formatter={value => `${value}`}\r\n                        value={inputValue}\r\n                        onChange={handleOnChange}\r\n                    />\r\n                    <Button\r\n                        style={{ marginRight: '10px' }}\r\n                        type=\"primary\"\r\n                        onClick={showConfirm}\r\n                        disabled={isDisableButton}\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                    <Button\r\n                        // style={{ marginBottom: '16px' }}\r\n                        type=\"primary\"\r\n                        danger\r\n                        onClick={handleClickReset}\r\n                    >\r\n                        Reset\r\n                    </Button>\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThresholdSlideItem;","import \"./index.scss\"\r\nimport moment from \"moment\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Form, FormGroup } from \"react-bootstrap\"\r\nimport { DeviceContext } from \"../../App\";\r\nimport { DatePicker } from \"antd\";\r\nimport { Properties } from \"./custom\";\r\nimport Graph from \"../Graph\";\r\nimport ThresholdSlideItem from \"../ThresholdSlide\";\r\n\r\nconst Statistics = () => {\r\n    const { deviceState } = useContext(DeviceContext);\r\n    const { data } = deviceState;\r\n    const [ deviceIdChoose, setDeviceIdChoose ] = useState(0); \r\n    const [ propertyChoose, setPropertyChoose ] = useState(Properties[0]);\r\n    const handleDeviceChange = (e: any) => {\r\n        setDeviceIdChoose(e.target.value)\r\n    }\r\n\r\n    const handlePropertyChange = (e: any) => {\r\n        setPropertyChoose(Properties[e.target.value])\r\n    }\r\n    const [ startDate, setStartDate ] = useState<any>(null);\r\n    const [ endDate, setEndDate ] = useState<any>(null);    \r\n\r\n    useEffect(() => {\r\n        if(data && data[0] && !startDate && !endDate) {\r\n            setStartDate((data[deviceIdChoose][propertyChoose.value] as any).updateTime[0]?.toLocaleString());\r\n            setEndDate((data[deviceIdChoose][propertyChoose.value] as any).updateTime[(data[deviceIdChoose][propertyChoose.value]as any).updateTime.length-1]?.toLocaleString())\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[data])\r\n\r\n    const handleOnChangeDate = (value: any, dateString: any) => {\r\n        // console.log(value,\"value\");\r\n        // console.log(dateString,\"string\");\r\n    }\r\n\r\n    const onOk = (value: any) => {\r\n        setStartDate(value[0]?._d)\r\n        setEndDate(value[1]?._d)\r\n    }\r\n    const disabledDate = (current: any) => {\r\n        return current > moment().endOf('day');\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex flex-row justify-content-center flex-wrap\">\r\n            <div className=\"p-3 graphContainer\">\r\n                <Form className=\"selection-view\">\r\n                    <FormGroup className=\"selection-form\">\r\n                        <Form.Label>Chọn thiết bị</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            type=\"name\"\r\n                            placeholder=\"Name\"\r\n                            className=\"\"\r\n                            onChange={handleDeviceChange}\r\n                        >\r\n                            {data && data.map((device: any, index: number) => (\r\n                                <option key={device._id} value={index}>{device.name}</option>\r\n                            ))}\r\n                        </Form.Control>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"selection-form\">\r\n                        <Form.Label>Chọn thông số</Form.Label>\r\n                        <Form.Control\r\n                            as=\"select\"\r\n                            type=\"property\"\r\n                            placeholder=\"Property\"\r\n                            className=\"\"\r\n                            onChange={handlePropertyChange}\r\n                        >\r\n                            {Properties.map((property: any, index: number) => (\r\n                                <option key={property.label} value={index}>{property.label}</option>\r\n                            ))}\r\n                        </Form.Control>\r\n                    </FormGroup>\r\n                    <FormGroup className=\"selection-form\">\r\n                        <Form.Label>Chọn khoảng thời gian</Form.Label>\r\n                        <Form.Text className=\"justify-self-flex-start d-flex\">\r\n                            <DatePicker.RangePicker \r\n                                showTime\r\n                                disabledDate={disabledDate}\r\n                                onChange={handleOnChangeDate}\r\n                                onOk={onOk}\r\n                            />\r\n                        </Form.Text>\r\n                    </FormGroup>\r\n                </Form>\r\n                {data && (\r\n                    <Graph \r\n                        data={data[deviceIdChoose]} \r\n                        startDate={startDate}\r\n                        endDate={endDate}\r\n                        property={propertyChoose}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className=\"setThresholdContainer\">\r\n                {data[deviceIdChoose] && (\r\n                    <ThresholdSlideItem\r\n                        data={data[deviceIdChoose]}\r\n                        property={propertyChoose}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Statistics;","import { Button, Col, InputNumber, Row, Slider, Modal } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Device } from \"../Devices\";\r\nimport { EngineProperty } from \"../ConfigTable/index\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\n\r\ninterface SlideItemProps {\r\n    data: Device,\r\n    property: EngineProperty,\r\n}\r\n\r\nconst ConfigSlideItem = (props: SlideItemProps) => {\r\n    const { data, property } = props;\r\n    const [ inputValue, setInputValue ] = useState((data as any)[property.value]);\r\n    const formatter = (value: any) => `${value}%`\r\n    const [ isDisableButton, setIsDisableButton ] = useState(true);\r\n    const [ updateDevice, { data: updateData }] = useMutation(property.apiKey)\r\n    \r\n    const isTabletOrMobile = useMediaQuery({query: \"(max-width: 1224px)\"});\r\n\r\n    useEffect(() => {\r\n        setInputValue((data as any)[property.value])\r\n    },[data])\r\n\r\n    useEffect(() => {\r\n        setIsDisableButton(inputValue === (data as any)[property.value]);\r\n    },[inputValue]);\r\n\r\n    const handleOnChange = (value: number) => {\r\n        setInputValue(value)\r\n    }\r\n\r\n    const { confirm } = Modal;\r\n    const showConfirm = () => {\r\n        confirm({\r\n            title: 'Xác nhận điều chỉnh thông số',\r\n            content: `${property.label} thay đổi chỉ số từ ${(data as any)[property.value]} thành ${inputValue}`,\r\n            onOk() {\r\n                setIsDisableButton(true);\r\n                updateDevice({\r\n                    variables: {\r\n                        value: inputValue,\r\n                        id: data._id,\r\n                    }\r\n                });\r\n            },\r\n            onCancel() {\r\n            },\r\n        });\r\n        \r\n    }\r\n\r\n    const handleClickReset = () => {\r\n        setIsDisableButton(false);\r\n        setInputValue((data as any)[property.value]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!isTabletOrMobile && (\r\n                <div className=\"p-3 m-2\">\r\n                    <h4 className=\"d-flex justify-self-flex-start\">{property.label}</h4>\r\n                        <div className=\"d-flex justify-content-flex-start align-items-center\">\r\n                            <div style={{width: \"40vw\"}}>\r\n                            <Slider\r\n                                min={-100}\r\n                                max={100}\r\n                                onChange={handleOnChange}\r\n                                value={typeof inputValue === 'number' ? inputValue : 0}\r\n                                marks={property.marks}\r\n                                defaultValue={(data as any)[property.value]}\r\n                                tipFormatter={formatter}\r\n                                />\r\n                            </div>\r\n                            <InputNumber\r\n                                min={-100}\r\n                                max={100}\r\n                                style={{ margin: '0 40px' }}\r\n                                formatter={value => `${value}`}\r\n                                value={inputValue}\r\n                                onChange={handleOnChange}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                onClick={showConfirm}\r\n                                style={{marginRight:\"2px\"}}\r\n                                disabled={isDisableButton}\r\n                            >\r\n                                Confirm\r\n                            </Button>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                danger\r\n                                onClick={handleClickReset}\r\n                            >\r\n                                Reset\r\n                            </Button>\r\n                        </div>\r\n                </div>\r\n            )}\r\n            {isTabletOrMobile && (\r\n                        <div className=\"py-3\">\r\n                        <h4 className=\"d-flex justify-self-flex-start\">{property.label}</h4>\r\n                                <div style={{width: \"90vw\", marginTop:\"20px\"}}>\r\n                                <Slider\r\n                                    min={-100}\r\n                                    max={100}\r\n                                    onChange={handleOnChange}\r\n                                    value={typeof inputValue === 'number' ? inputValue : 0}\r\n                                    marks={property.marks}\r\n                                    defaultValue={(data as any)[property.value]}\r\n                                    tipFormatter={formatter}\r\n                                    />\r\n                                </div>\r\n                            <div style={{marginTop: \"50px\"}}>\r\n                                <InputNumber\r\n                                    min={-100}\r\n                                    max={100}\r\n                                    style={{ marginRight: '40px' }}\r\n                                    formatter={value => `${value}`}\r\n                                    value={inputValue}\r\n                                    onChange={handleOnChange}\r\n                                    />\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    style={{marginRight: \"2px\"}}\r\n                                    onClick={showConfirm}\r\n                                    disabled={isDisableButton}\r\n                                    >\r\n                                    Confirm\r\n                                </Button>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    danger\r\n                                    onClick={handleClickReset}\r\n                                    >\r\n                                    Reset\r\n                                </Button>\r\n                            </div>\r\n                    </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfigSlideItem;","import { DocumentNode } from \"graphql\";\r\nimport { Device } from \"../Devices\";\r\nimport ConfigSlideItem from \"../ConfigSlide\";\r\n\r\nexport interface EngineProperty {\r\n    label: string,\r\n    value: string,\r\n    marks?: any,\r\n    apiKey: DocumentNode,\r\n}\r\n\r\ninterface ConfigTableProps {\r\n    data: Device;\r\n    properties: EngineProperty[];\r\n}\r\n\r\nconst ConfigTable = (props: ConfigTableProps) => {\r\n    const { data, properties } = props;\r\n    return (\r\n        <div className=\"\">\r\n            {properties.map(property => (\r\n                <ConfigSlideItem data={data} property={property}/>    \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfigTable;","import { gql } from \"@apollo/client\";\r\n\r\nexport const ENVIRONMENT_FEEDING_UNIT = gql`\r\n    fragment EnvironmentFeedingUnit on EnvironmentFeedingUnit {\r\n        data\r\n        threshold\r\n        updateTime\r\n    }\r\n`;\r\n\r\nexport const SET_FOOT_CAN = gql`\r\n    ${ENVIRONMENT_FEEDING_UNIT}\r\n    mutation SetFootCan($value: Float!, $id: String!) {\r\n        setFootCan(value: $value, id: $id) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n            cylinder\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SET_FOOT_TRAY = gql`\r\n    ${ENVIRONMENT_FEEDING_UNIT}\r\n    mutation SetFootTray($value: Float!, $id: String!) {\r\n        setFootTray(value: $value, id: $id) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n            cylinder\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SET_FAN = gql`\r\n    ${ENVIRONMENT_FEEDING_UNIT}\r\n    mutation SetFan($value: Float!, $id: String!) {\r\n        setFan(value: $value, id: $id) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n            cylinder\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_FEEDING_CYLINDER_STATUS = gql`\r\n    ${ENVIRONMENT_FEEDING_UNIT}\r\n    mutation UpdateFeedingCylinderStatus($id: String!, $status: String!) {\r\n        updateFeedingCylinderStatus(id: $id, status: $status) {\r\n            _id\r\n            name \r\n            temperature {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            o2Gas {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            pH {\r\n                ...EnvironmentFeedingUnit\r\n            }\r\n            footCan\r\n            footTray\r\n            fan\r\n            cylinder\r\n        }\r\n    }\r\n`;\r\n","import { useCallback, useRef, useState } from \"react\";\r\n\r\nconst useLongPress = (\r\n    onLongPress,\r\n    onClick,\r\n    onRelease,\r\n    { shouldPreventDefault = true, delay = 300 } = {}\r\n    ) => {\r\n    const [longPressTriggered, setLongPressTriggered] = useState(false);\r\n    const timeout = useRef();\r\n    const target = useRef();\r\n\r\n    const start = useCallback(\r\n        event => {\r\n            if (shouldPreventDefault && event.target) {\r\n                    event.target.addEventListener(\"touchend\", preventDefault, {\r\n                    passive: false\r\n                });\r\n                target.current = event.target;\r\n            }\r\n            timeout.current = setTimeout(() => {\r\n                onLongPress(event);\r\n                setLongPressTriggered(true);\r\n            }, delay);\r\n        },\r\n        [onLongPress, delay, shouldPreventDefault]\r\n    );\r\n\r\n    const clear = useCallback(\r\n        (event, shouldTriggerClick = true) => {\r\n            timeout.current && clearTimeout(timeout.current);\r\n            shouldTriggerClick && !longPressTriggered && onClick();\r\n            shouldTriggerClick && longPressTriggered && onRelease();\r\n            setLongPressTriggered(false);\r\n            if (shouldPreventDefault && target.current) {\r\n                target.current.removeEventListener(\"touchend\", preventDefault);\r\n            }\r\n        },\r\n        [shouldPreventDefault, onClick, onRelease, longPressTriggered]\r\n    );\r\n\r\n    return {\r\n        onMouseDown: e => start(e),\r\n        onTouchStart: e => start(e),\r\n        onMouseUp: e => clear(e),\r\n        onMouseLeave: e => clear(e, false),\r\n        onTouchEnd: e => clear(e)\r\n    };\r\n};\r\n\r\nconst isTouchEvent = event => {\r\nreturn \"touches\" in event;\r\n};\r\n\r\nconst preventDefault = event => {\r\nif (!isTouchEvent(event)) return;\r\n\r\nif (event.touches.length < 2 && event.preventDefault) {\r\n    event.preventDefault();\r\n}\r\n};\r\n\r\nexport default useLongPress;","import { Button } from \"antd\";\r\nimport { useContext, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { DeviceContext } from \"../../App\";\r\nimport ConfigTable from \"../ConfigTable\";\r\nimport { SET_FAN, SET_FOOT_CAN, SET_FOOT_TRAY, UPDATE_FEEDING_CYLINDER_STATUS } from \"../ConfigTable/setEngineSchema\";\r\nimport { CaretUpOutlined, CaretDownOutlined } from '@ant-design/icons';\r\nimport { useMutation } from \"@apollo/client\";\r\nimport useLongPress from \"./useLongPress\";\r\n\r\n\r\nconst DefaultMarks = {\r\n    \"0\": \"0\",\r\n    \"-100\": {\r\n        style: {\r\n            color: '#f50',\r\n        },\r\n        label: <strong>-100</strong>,\r\n    },\r\n    \"100\": {\r\n        style: {\r\n            color: '#f50',\r\n        },\r\n        label: <strong>100</strong>,\r\n    },\r\n    \"-75\": {\r\n        style: {\r\n            color: '#d4d106',\r\n        },\r\n        label: <strong>-75</strong>,\r\n    },\r\n    \"75\": {\r\n        style: {\r\n            color: '#d4d106',\r\n        },\r\n        label: <strong>75</strong>,\r\n    },\r\n    \"-50\": {\r\n        style: {\r\n            color: '#02ff63',\r\n        },\r\n        label: <strong>-50</strong>,\r\n    },\r\n    \"50\": {\r\n        style: {\r\n            color: '#02ff63',\r\n        },\r\n        label: <strong>50</strong>,\r\n    },\r\n}\r\nconst Properties = [\r\n    {\r\n        label: \"Động cơ mở khoang thức ăn\",\r\n        value: \"footCan\",\r\n        marks: DefaultMarks,\r\n        apiKey: SET_FOOT_CAN,\r\n    },\r\n    {\r\n        label: \"Động cơ quay khay thức ăn\",\r\n        value: \"footTray\",\r\n        marks: DefaultMarks,\r\n        apiKey: SET_FOOT_TRAY,\r\n    },\r\n    {\r\n        label: \"Động cơ cánh quạt chân vịt\",\r\n        value: \"fan\",\r\n        marks: DefaultMarks,\r\n        apiKey: SET_FAN,\r\n    }\r\n];\r\n\r\nconst ConfigComponent = () => {\r\n    const { deviceState, setDeviceState } = useContext(DeviceContext);\r\n    const [ updateCylinder ] = useMutation(UPDATE_FEEDING_CYLINDER_STATUS);\r\n\r\n    const { data } = deviceState;\r\n    const [ deviceIdChoose, setDeviceIdChoose ] = useState(0); \r\n    const handleDeviceChange = (e: any) => {\r\n        setDeviceIdChoose(e.target.value)\r\n    }\r\n\r\n    const onLongPressUp = () => {\r\n        console.log('longpress up is triggered');\r\n        updateCylinder({\r\n            variables: {\r\n                id: (data[deviceIdChoose] as any)._id,\r\n                status: \"up\"\r\n            }\r\n        })\r\n    };\r\n    \r\n    const onLongPressDown = () => {\r\n        console.log('longpress down is triggered');\r\n        updateCylinder({\r\n            variables: {\r\n                id: (data[deviceIdChoose] as any)._id,\r\n                status: \"down\"\r\n            }\r\n        })\r\n    };\r\n    const onRelease = () => {\r\n        console.log('release up')\r\n        updateCylinder({\r\n            variables: {\r\n                id: (data[deviceIdChoose] as any)._id,\r\n                status: \"stop\"\r\n            }\r\n        })\r\n        \r\n    }\r\n    \r\n    const onClickUp = () => {\r\n        console.log('click up is triggered')\r\n    }\r\n    const onClickDown = () => {\r\n        console.log('click down is triggered')\r\n    }\r\n\r\n    const defaultOptions = {\r\n        shouldPreventDefault: true,\r\n        delay: 200,\r\n    };\r\n\r\n    const longPressUpEvent = useLongPress(onLongPressUp, onClickUp, onRelease, defaultOptions);\r\n    const longPressDownEvent = useLongPress(onLongPressDown, onClickDown, onRelease, defaultOptions);\r\n\r\n\r\n    return (\r\n        <div className=\"px-3 py-4\">\r\n            <h1>Điều chỉnh thông số động cơ thiết bị</h1> \r\n            <Form className=\"d-flex \">\r\n                <Form.Group className=\"py-2 px-4\">\r\n                    <Form.Label style={{fontSize: \"1.2rem\"}}>Chọn thiết bị</Form.Label>\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        type=\"name\"\r\n                        placeholder=\"Name\"\r\n                        onChange={handleDeviceChange}\r\n                    >\r\n                        {data && data.map((device: any, index: number) => (\r\n                            <option value={index}>{device.name}</option>\r\n                        ))}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n            </Form>\r\n            <div className=\"d-flex flex-row justify-content-flex-start px-4\">\r\n                <h4 className=\"align-self-center\">Điều chỉnh khay thức ăn</h4>\r\n                <div className=\"d-flex flex-column justify-content-center mx-5\">\r\n                    <Button \r\n                        {...longPressUpEvent}\r\n                        icon={<CaretUpOutlined />}\r\n                        size=\"large\"\r\n                    />\r\n                    <Button \r\n                        {...longPressDownEvent}\r\n                        icon={<CaretDownOutlined />}\r\n                        size=\"large\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            {data[0] && <ConfigTable data={data[deviceIdChoose]} properties={Properties}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfigComponent;","import \"./App.css\";\r\nimport { createContext, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_FEEDING_DEVICES } from \"./component/Devices/schema\";\r\nimport Header from \"./component/Header\";\r\nimport Statistics from \"./component/Statistics\";\r\nimport ConfigComponent from \"./component/ConfigComponent\";\r\n\r\nexport const DeviceContext = createContext({\r\n  deviceState: {\r\n    data: [],\r\n  },\r\n  setDeviceState: (() => {}) as any,\r\n});\r\n\r\nfunction App() {\r\n  const { data } = useQuery(GET_FEEDING_DEVICES, {\r\n    pollInterval: 10000,\r\n  });\r\n  const [deviceState, setDeviceState] = useState({data: []});\r\n  \r\n  useEffect(() => {\r\n    if(data)\r\n    setDeviceState({\r\n      data: data?.getFeedingDevices\r\n    })\r\n  }, [data]);\r\n  \r\n  return (\r\n    <DeviceContext.Provider value={{ deviceState, setDeviceState}}>\r\n      <div className=\"App\">\r\n        <div className=\"vh-100 mvw-100 m-0 flex-column flex no-wrap\">\r\n          <main className=\"flex-grow\">\r\n            <BrowserRouter>\r\n              <Header/>\r\n              <Switch>\r\n                <Route path=\"/device\">\r\n                  <ConfigComponent />\r\n                </Route>\r\n                <Route path=\"/statistics\">\r\n                  <Statistics />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  <ConfigComponent/>\r\n                </Route>\r\n              </Switch>\r\n            </BrowserRouter>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </DeviceContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\n\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_GRAPHQL_URI,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}